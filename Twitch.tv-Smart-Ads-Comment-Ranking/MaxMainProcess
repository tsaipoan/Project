/* TODO: which of these #include's can be removed, if any? */
#include <iostream>
#include <string>
#include <vector>
#include <time.h>
#include <sstream>
#include <cctype>
#include <algorithm>
#include "mysql_driver.h"
#include <cppconn/prepared_statement.h>

#define              COMMENT_UPDATE_RATE_MS 1000
#define		              AD_UPDATE_RATE_MS 10000
#define                  MAX_AD_LIFETIME_MS 10000

#define               POPULARITY_MULTIPLIER 300 /* The stream popularity is a ratio between ad clicks and viewers in the channel. 
												   The larger this number, the less clicks needed to deem an ad "popular". */

#define		          COMMENT_DATABASE_NAME "messageBase"
#define           COMMENT_DATABASE_USERNAME "dBAdmin"
#define           COMMENT_DATABASE_PASSWORD "amazonisamazing"
#define    COMMENT_DATABASE_ENDPOINT_PREFIX "tcp:/"
#define    COMMENT_DATABASE_ENDPOINT_SUFFIX "/messagebase.c0dpqj5xfw8m.us-east-1.rds.amazonaws.com"

#define			           AD_DATABASE_NAME "AdvKeyWords"
#define		           AD_DATABASE_USERNAME "dbadmin"
#define		           AD_DATABASE_PASSWORD "amazonisamazing"
#define		           AD_DATABASE_ENDPOINT "adv.c0dpqj5xfw8m.us-east-1.rds.amazonaws.com"

#define	    STREAM_AUDIO_TEXT_DATABASE_NAME "ChannelTranscription"
#define	STREAM_AUDIO_TEXT_DATABASE_USERNAME "dbadmin"
#define STREAM_AUDIO_TEXT_DATABASE_PASSWORD "amazonisamazing"
#define STREAM_AUDIO_TEXT_DATABASE_ENDPOINT "adv.c0dpqj5xfw8m.us-east-1.rds.amazonaws.com"

std::string toLower(std::string input){
	std::string result = "";
	for (int i = 0; i < input.length(); i++){
		result += std::tolower(input.at(i));
	}
	return result;
}

std::vector<std::string> stringToWords(std::string input){
	std::stringstream ss(input);
	std::istream_iterator<std::string> begin(ss);
	std::istream_iterator<std::string> end;
	std::vector<std::string> vstrings(begin, end);
	return vstrings;
}

bool haysackContainsNeedle(std::vector<std::string>& haysack, std::string needle){
	return std::find(haysack.begin(), haysack.end(), needle) == haysack.end();
}

int findMaxIndex(std::vector<int> input){
	int max = 0, index = 0;
	for (int i = 0; i < input.size(); i++){
		if (input[i] > max){
			index = i;
			max = input[i];
		}
	}
	return index;
}

clock_t now(){
	return (clock() / CLOCKS_PER_SEC) * 1000;
}

std::string getStreamAudioText(std::string& channelName, sql::Connection* con, sql::Statement* stmt, sql::ResultSet* res){
	std::string result;

	/* Extract all comments from the comment database, and order them by likes. */
	res = stmt->executeQuery("SELECT hyp FROM " + channelName + " ORDER BY _time ASC");

	/* Extract the results from the query into the results vector. */
	while (res->next()) {
		std::string hyp = res->getString("hyp");
		result += " " + hyp;
	}

	return result;
}

std::string space2underscore(std::string text) {
	for (std::string::iterator it = text.begin(); it != text.end(); ++it) {
		if (*it == ' ') {
			*it = '_';
		}
	}
	return text;
}

std::string replaceChar(std::string str, char ch1, char ch2) {
	for (int i = 0; i < str.length(); ++i) {
		if (str[i] == ch1)
			str[i] = ch2;
	}
	return str;
}

void createCommentTableForChannel(std::string& channelName, sql::Statement* stmt){
	/* Create a comment table in the database to handle comments from the given channel. */
	stmt->execute("CREATE TABLE IF NOT EXISTS " + channelName + "(timeSent TIMESTAMP, message varchar(512) PRIMARY KEY, likes INT, username VARCHAR(45), rgb VARCHAR(20))");
}

void resetPopularityIPTable(std::string& channelName, sql::Statement* stmt, std::string& currentKeyword){
	stmt->execute("DROP TABLE IF EXISTS " + channelName + space2underscore(currentKeyword) + "Popularity");
}

void createAdTableForChannel(std::string& channelName, sql::Connection* con, sql::Statement* stmt){
	sql::PreparedStatement *pstmt;
	stmt->execute("DROP TABLE IF EXISTS " + channelName);
	stmt->execute("CREATE TABLE " + channelName + "(id int primary key not null, Keyword varchar(500), clicks int, viewers int)");
	pstmt = con->prepareStatement("INSERT INTO " + channelName + "(id) VALUES (?)");
	pstmt->setInt(1, 0);
	pstmt->executeUpdate();
	delete pstmt;
}

void writeAdKeywordToDatabase(std::string& keyword, std::string& channelName, sql::Connection* con, sql::Statement* stmt, sql::ResultSet* res){
	const char filler = '_';							/* Specify which character will be used to extend the string to 40 characters, if it is shorter than 40. */
	if (keyword == "") { keyword = "null"; }			/* If the keyword is empty, change it to "null". */
	keyword.erase(std::remove_if(keyword.begin(), keyword.end(), [](const unsigned &c){ return !isspace(c) && !isalpha(c);}), keyword.end());
														/* Strip the keyword of all non-alphanumeric characters. */
	keyword.resize(40, filler);							/* Resize the string to size 40; if it's already shorter than 40, fill in the remaining space with the filler character. */
	//keyword = replaceChar(keyword, '\'', '_'); // DEVNOTE can't remember what this does. Remove it if possible.
	resetPopularityIPTable(channelName, stmt, keyword);	/* Because the keyword is being overwritten, reset the table that tracks clicks for this keyword from unique IP's. */
	sql::PreparedStatement *pstmt;
	pstmt = con->prepareStatement("UPDATE " + channelName + " SET Keyword='" + keyword + "', clicks=0");
	pstmt->executeUpdate();								/* Write the keyword to the database. */
	delete pstmt;
}

std::vector<std::string> getFeaturedCommentsFromDatabase(std::string& channelName, sql::Statement* stmt, sql::ResultSet* res){
	std::vector<std::string> results;

	/* Extract all comments from the comment database, and order them by likes. */
	res = stmt->executeQuery("SELECT message FROM " + channelName + " ORDER BY likes DESC");

	/* Extract the results from the query into the results vector. */
	while (res->next()) {
		std::string message = res->getString("message");
		results.push_back(message);
	}

	if (results.size() == 0){
		results.push_back("Alienware laptop");
	}

	return results;
}

double getAdPopularity(std::string& channelName, sql::Connection* con, sql::Statement* stmt, sql::ResultSet* res){
	int clicks = 0;
	int viewers = 0;

	res = stmt->executeQuery("SELECT clicks FROM " + channelName);

	while (res->next()) {
		clicks = res->getInt("clicks");
	}

	res = stmt->executeQuery("SELECT viewers FROM " + channelName);

	while (res->next()) {
		viewers = res->getInt("viewers");
	}

	return ((double)clicks / viewers) * POPULARITY_MULTIPLIER;
}

void updateAdvertisement(std::vector<std::string>& featuredComments, std::string& streamAudioText, std::vector<std::string>& advertisementPool,
	int& advertisementRotationIndex, std::string& channelName, sql::Connection* con, sql::Statement* stmt, sql::ResultSet* res, clock_t& currentAdLifetime, int& adSource){
	std::string featuredAdvertisement;
	std::vector<int> scores;
	std::vector<std::string> keywordPool, wordsInComment, wordsInStreamAudioText = stringToWords(streamAudioText), wordsAlreadyFromThisComment, wordsInAd;
	bool overrideRotation = false;
	double popularity;
                
	adSource = (adSource + 1) % 3;	/* Change the source of the advertisement. The source of the ad keyword rotates between the featured comments, stream audio, and the hard-coded keyword pool. */

	/* Increment the current ad's lifetime accordingly. */
	currentAdLifetime += AD_UPDATE_RATE_MS;

	/* If the current ad isn't too old, check to see if it's popular enough to keep around. Otherwise, proceed to replace it. */
	if (!(currentAdLifetime > MAX_AD_LIFETIME_MS)){
		popularity = getAdPopularity(channelName, con, stmt, res);

		/* If the current ad is popular enough, don't change it. */
		if (popularity - ((double)currentAdLifetime / MAX_AD_LIFETIME_MS) > 0){
			return;
		}
	}

	switch (adSource){
	/* Derive ad keyword from featured comments */
	case 0:
		writeAdKeywordToDatabase(featuredComments[0], channelName, con, stmt, res);
		break;

	/* Derive ad keyword from stream audio */
	case 1:
		writeAdKeywordToDatabase(streamAudioText, channelName, con, stmt, res);
		break;

	/* Derive ad keyword from hard-coded pool */
	case 2:
		/* Randomly shuffle the advertisement pool vector to avoid bias towards one particular ad due to searching it inorder. */
		std::random_shuffle(advertisementPool.begin(), advertisementPool.end());

		/* Initialize the scores vector by populating it with zeros. */
		for (int i = 0; i < advertisementPool.size(); i++){
			scores.push_back(0);
		}

		/* Search the advertisement pool for matches, given strings from the stream audio as queries. If there's a match, set the featured advertisement variable appropriately and return. */
		for (int i = 0; i < advertisementPool.size(); i++){
			wordsInAd = stringToWords(advertisementPool[i]); // Devnote: this stringToWords op is being called below. Instead, store it in a vector and only call it once.
			for (auto wordInAd : wordsInAd){
				for (auto word : stringToWords(streamAudioText)){
					if (toLower(wordInAd) == word){
						overrideRotation = true;
						scores[i]++;
					}
				}
			}
		}

		if (overrideRotation){
			featuredAdvertisement = advertisementPool[findMaxIndex(scores)];
			writeAdKeywordToDatabase(featuredAdvertisement, channelName, con, stmt, res);
			currentAdLifetime = 0;
			return;
		}

		/* Add words from featured comments to the keyword pool, ignoring duplicate words within each individual comment;
		   i.e. the comments "HyperX rules!" and "HyperX HyperX HyperX" will both only count as one occurence of "HyperX". */
		for (auto commentMessage : featuredComments){
			wordsInComment = stringToWords(commentMessage);
			wordsAlreadyFromThisComment.clear();

			for (auto wordInComment : wordsInComment){
				wordInComment = toLower(wordInComment);
				if (haysackContainsNeedle(wordsAlreadyFromThisComment, wordInComment)){
					keywordPool.push_back(wordInComment);

					/* Record that this word has already occurred in this comment, so that future occurances of it in this comment are ignored. */
					wordsAlreadyFromThisComment.push_back(wordInComment);
				}
			}
		}

		/* Search the advertisement pool for word matches and increment that ad's score accordingly. */
		for (int i = 0; i < advertisementPool.size(); i++){
			wordsInAd = stringToWords(advertisementPool[i]);
			for (auto wordInAd : wordsInAd){
				for (auto word : keywordPool){
					if (toLower(wordInAd) == word){
						overrideRotation = true;
						scores[i]++;
					}
				}
			}
		}

		/* Set the featured advertisement, depending on whether or not the rotation should be overridden. */
		featuredAdvertisement = overrideRotation ? advertisementPool[findMaxIndex(scores)] : advertisementPool[advertisementRotationIndex];

		/* Increment the advertisement rotation index, effectively moving the ad currently on-deck to being at-bat. */
		advertisementRotationIndex = (advertisementRotationIndex + 1) % advertisementPool.size();

		writeAdKeywordToDatabase(featuredAdvertisement, channelName, con, stmt, res);
		currentAdLifetime = 0;

		break;
	}
}

void manageStream(std::string channelName){
	sql::mysql::MySQL_Driver* driver;
	sql::Connection* commentConnection;
	sql::Connection* adConnection;
	sql::Connection* streamAudioTextConnection;
	sql::Statement* commentStatement;
	sql::Statement* adStatement;
	sql::Statement* streamAudioTextStatement;
	sql::ResultSet* commentResultSet;
	sql::ResultSet* adResultSet;
	sql::ResultSet* streamAudioTextResultSet;
	std::vector<std::string> advertisementKeywordPool;
	std::vector<std::string> featuredComments;
	std::string streamAudioText;
	std::string advertisementKeyword;
	clock_t lastCommentFetch = now();
	clock_t lastAdvertisementFetch = now();
	clock_t commentTimeElapsed;
	clock_t advertisementTimeElapsed;
	clock_t currentAdLifetime = 0;
	int advertisementRotationIndex = 0;
	int adSource = 0;

	try {
		/* Populate the advertisement keyword pool. */
		advertisementKeywordPool.push_back("HyperX Headset");
		advertisementKeywordPool.push_back("DXracer Chair");
		advertisementKeywordPool.push_back("Redragon Keyboard");
		advertisementKeywordPool.push_back("ROCCAT Mouse");
		advertisementKeywordPool.push_back("Asus Monitor");

		/* Establish a connection to both the comment database and the ad database. */
		driver = sql::mysql::get_driver_instance();
		commentConnection = driver->connect((std::string)COMMENT_DATABASE_ENDPOINT_PREFIX + (std::string)COMMENT_DATABASE_ENDPOINT_SUFFIX, COMMENT_DATABASE_USERNAME, COMMENT_DATABASE_PASSWORD);
		commentStatement = commentConnection->createStatement();
		commentStatement->execute("USE " + (std::string)COMMENT_DATABASE_NAME);
		adConnection = driver->connect(AD_DATABASE_ENDPOINT, AD_DATABASE_USERNAME, AD_DATABASE_PASSWORD);
		adStatement = adConnection->createStatement();
		adStatement->execute("USE " + (std::string)AD_DATABASE_NAME);
		streamAudioTextConnection = driver->connect(STREAM_AUDIO_TEXT_DATABASE_ENDPOINT, STREAM_AUDIO_TEXT_DATABASE_USERNAME, STREAM_AUDIO_TEXT_DATABASE_PASSWORD);
		streamAudioTextStatement = streamAudioTextConnection->createStatement();
		streamAudioTextStatement->execute("USE " + (std::string)STREAM_AUDIO_TEXT_DATABASE_NAME);

		/* Create a table in the comment database to handle this stream channel's comments. */
		createCommentTableForChannel(channelName, commentStatement);

		/* Create a table in the advertisement database to handle this stream channel's advertisements. */
		createAdTableForChannel(channelName, adConnection, adStatement);

		/* Initialize the advertisement to the first advertisement in the pool. */
		writeAdKeywordToDatabase(advertisementKeywordPool[0], channelName, adConnection, adStatement, adResultSet);

		/* Begin the main process loop */
		while (true){
			/* If past the comment update rate, update the comment pool used for keyword production. */
			commentTimeElapsed = now() - lastCommentFetch;
			if (commentTimeElapsed >= COMMENT_UPDATE_RATE_MS){
				featuredComments = getFeaturedCommentsFromDatabase(channelName, commentStatement, commentResultSet);
				lastCommentFetch = now();
			}

			/* If past the advertisement update rate, update the featured advertisement keyword. This could be either returning to the normal rotation of ads, or overriding the rotation with a featured */
			advertisementTimeElapsed = now() - lastAdvertisementFetch;
			if (advertisementTimeElapsed >= AD_UPDATE_RATE_MS){
				streamAudioText = getStreamAudioText(channelName, streamAudioTextConnection, streamAudioTextStatement, streamAudioTextResultSet);
				updateAdvertisement(featuredComments, streamAudioText, advertisementKeywordPool, advertisementRotationIndex, channelName, adConnection, adStatement, adResultSet, currentAdLifetime, adSource);
				lastAdvertisementFetch = now();
			}
		}

		/* Delete memory allocated to used variables. */
		delete commentConnection;
		delete commentStatement;
		delete commentResultSet;
		delete adConnection;
		delete adStatement;
		delete adResultSet;
	}

	/* Catch any errors and output their details to std::cout. */
	catch (const std::exception& ex) {
		std::cout << "Error: " << ex.what() << std::endl;
	}
}

int main(int argc, const char* argv[]){
	manageStream(toLower(std::string(argv[1])));
	return 0;
}
